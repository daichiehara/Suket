@using Microsoft.AspNetCore.Identity;
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Bootstrap4.Core;
@model IEnumerable<Suket.Models.Post>
@inject UserManager<UserAccount> userManager;
@inject SignInManager<UserAccount> signInManager;

@{
    ViewData["Title"] = "My List";
    var currentUser = await userManager.GetUserAsync(User);
    bool isLoggedIn = signInManager.IsSignedIn(User) && currentUser != null;
}
<head>
    <link rel="stylesheet" href="/css/PostIndex.css" />
</head>

<div class="d-flex align-items-center mb-2">
    <span class="material-symbols-outlined text-primary fs-3 me-2">
        sentiment_satisfied
    </span>
    <h5 class="fw-bold mb-0">My List</h5>
</div>

<div class="d-flex align-items-center mb-2">
    <p class="mb-0 me-2">採用されたPostのみ</p>
    <label class="switch">
        <input type="checkbox" id="showAdoptedToggle">
        <span class="slider round"></span>
    </label>
</div>



<div class="row row-cols-1 row-cols-md-3 g-4 mt-1">
        @foreach (var a in Model)
        {
            <div class="col mt-2">
                <div class="card">
                    <div class="card-body p-3">
                        @if (a.State == State.End)
                        {
                            <div class="end-banner">募集終了</div>
                        }
                        @{
                            var timeDifference = DateTimeOffset.UtcNow - a.Created;
                            string timeDifferenceString;
                            if (timeDifference.TotalDays >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalDays}日前";
                            }
                            else if (timeDifference.TotalHours >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalHours}時間前";
                            }
                            else if (timeDifference.TotalMinutes >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalMinutes}分前";
                            }
                            else
                            {
                                timeDifferenceString = "たった今";
                            }
                        }
                        <div class="d-flex flex-wrap">
                            <p class="card-text post-icon f-14 mb-0 me-2 text-secondary text-truncate">
                                <span class="material-symbols-outlined text-secondary me-1 f-14">
                                    calendar_month
                                </span>
                                @TimeZoneInfo.ConvertTimeFromUtc(a.Time.UtcDateTime, TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time")).ToString("yyyy/MM/dd HH:mm")
                            </p>

                            <p class="card-text post-icon f-14 text-secondary text-truncate">
                                <span class="material-symbols-outlined text-secondary me-1 f-14">
                                    location_on
                                </span>
                                @Html.DisplayFor(modelItem => a.Prefecture)｜@a.Place
                            </p>
                        </div>

                        <h5 class="card-title mb-1"><a asp-action="Details" asp-route-id="@a.PostId" class="stretched-link">@((a.Title.Length > 30) ? a.Title.Substring(0, 30) + "..." : a.Title)</a><span style="font-size:16px; color:#6c757d">・@timeDifferenceString</span></h5>
                        <div class="d-flex align-items-center mb-1">
                        <a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName" class="stretched-link" style="position: relative;">
                                @if (!string.IsNullOrWhiteSpace(a.UserAccount.ProfilePictureUrl))
                                {
                                    <img src="@a.UserAccount.ProfilePictureUrl" alt="Profile Picture" class="profile-icon" />
                                }
                                else
                                {
                                <img src="https://mintsports-profile-img.s3.ap-northeast-1.amazonaws.com/kkrn_icon_user_3.png" alt="Profile Picture" class="profile-icon" />
                                }
                        </a>
                        <a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName" class="card-text profile-link stretched-link" style="position: relative;">@(a.UserAccount.NickName ?? a.UserAccount.UserName)</a>
                        </div>
              
                        <div class="d-flex mb-2">
                            <div class="card-text d-flex align-items-center">
                                <span class="material-symbols-outlined text-secondary me-2">
                                    payments
                                </span>
                                <p class="mb-0">報酬：@a.Reward　円</p>
                            </div>

                            <p class="card-text post-icon ms-auto">
                                <span class="material-symbols-outlined text-secondary me-2 fs-5">
                                    sell
                                </span>@Html.DisplayFor(modelItem => a.Genre)
                            </p>
                        </div>
                        <pre style="white-space: normal;" class="card-text">@((a.Message.Length > 50) ? a.Message.Substring(0, 50) + "..." : a.Message)</pre> 
                        @if (isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id))
                        {
                            <div><strong>認証コード：<span style="color:red;">@a.Certification</span></strong></div>
                        }
                        
                        @{
                            var userAdoptionPosts = ViewData["s_UserAdoptionPosts"] as Dictionary<int, bool>;
                        }
                        
                        <div class="mt-2" style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <button class="subscription-button btn btn-outline-secondary rounded-pill stretched-link" data-post-id="@a.PostId" style="position: relative;">応募</button>
                                <span class="subscription-count">@(((Dictionary<int, int>)ViewData["s_SubscriptionCounts"])[a.PostId])</span>
                            </div>
                            @if (userAdoptionPosts != null && userAdoptionPosts.ContainsKey(a.PostId))
                            {
                                <div style="margin-left: auto;">
                                <a asp-action="VerifyAttendance" asp-controller="RollCalls" asp-route-id="@a.PostId" class="btn btn-success stretched-link" style="position: relative;">参加確認</a>
                                </div>
                            }
                        </div>

                        @if (isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id))
                        {
                            var adoptions = ((Dictionary<int, bool>)ViewData["s_UserAdoptionPosts"]);
                            var adoptionExists = adoptions.ContainsKey(a.PostId) && adoptions[a.PostId];

                            <p>
                                <a asp-action="Subscriber" asp-route-id="@a.PostId">採用する・応募者一覧</a>
                                @if (a.State == State.Recruiting)
                                {
                                    <span> | </span>
                                    <a asp-action="Edit" asp-route-id="@a.PostId">Edit</a>
                                }
                                @if (!adoptionExists && a.State == State.Recruiting)
                                {
                                    <span> | </span>
                                    <a asp-action="Delete" asp-route-id="@a.PostId">削除</a>
                                }
                            </p>
                        }
                    </div>
                </div>
            </div>
        }
</div>


@{
    var errorMessage = ViewData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}


@section Scripts {
    <script>
        $(function () {
            // Check localStorage for the showAdopted state
            var showAdopted = localStorage.getItem('showAdopted') === 'true';
            
            // Set the initial state of the checkbox
            $('#showAdoptedToggle').prop('checked', showAdopted);

            
            $('#showAdoptedToggle').change(function () {
                showAdopted = $(this).is(':checked');

                // Store the new state in localStorage
                localStorage.setItem('showAdopted', showAdopted);

                window.location.href = '/Posts/MySubscribedPosts?showAdopted=' + showAdopted;
            });
            

            // Initialize button colors based on whether the user has liked each post
            $('.subscription-button').each(function () {
                var button = $(this);
                var postId = button.data('post-id');
                var isLikedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["s_UserSubscriptionPosts"]));
                var isAdoptedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["s_UserAdoptionPosts"]));

                // Check if the user has liked the post
                if (isLikedByUser[postId]) {
                    // Check if the user is the adopted user for this post
                    if (isAdoptedByUser[postId]) {
                        button.addClass('liked-adopted');
                        button.prop('disabled', true);
                    } else {
                        button.addClass('liked');
                    }
                }
            });

            // Handle button clicks
            $('.subscription-button').click(function () {
                var button = $(this);
                var countSpan = button.next('.subscription-count');
                var postId = button.data('post-id');

                // Get the current like count
                var count = parseInt(countSpan.text());

                $.ajax({
                    url: '/Posts/ToggleSubscription',
                    method: 'POST',
                    data: { id: postId },
                    success: function (data) {
                        // Check if the button has the 'liked' class
                        if (button.hasClass('liked')) {
                            // If the button has the 'liked' class, decrement the count and remove the class
                            if (count > 0) {
                                countSpan.text(count - 1);
                            }
                            button.removeClass('liked');
                        } else {
                            // If the button does not have the 'liked' class, increment the count and add the class
                            countSpan.text(count + 1);
                            button.addClass('liked');
                        }
                    }
                });
            });
        });
    </script>
}
