@using Microsoft.AspNetCore.Identity;
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Bootstrap4.Core;
@model IEnumerable<Suket.Models.Post>
@inject UserManager<UserAccount> userManager;
@inject SignInManager<UserAccount> signInManager;

@{
    ViewData["Title"] = "My応募";
    var currentUser = await userManager.GetUserAsync(User);
    bool isLoggedIn = signInManager.IsSignedIn(User) && currentUser != null;
}
<head>
    <link rel="stylesheet" href="/css/PostIndex.css" />
</head>


<h1>応募した投稿</h1>


<div>
採用された投稿のみ
    <label class="switch">
        <input type="checkbox" id="showAdoptedToggle">
        <span class="slider round"></span>
    </label>
</div>



<div class="container">
    <div class="row">
        @foreach (var a in Model)
        {
            <div class="col-md-4">
                <div class="card" style="margin-bottom:10px;">
                    @if (a.State == State.End)
                    {
                        <div class="end-banner">募集終了</div>
                    }
                    <div class="card-body">
                        @{
                            var timeDifference = DateTimeOffset.UtcNow - a.Created;
                            string timeDifferenceString;
                            if (timeDifference.TotalDays >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalDays}日前";
                            }
                            else if (timeDifference.TotalHours >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalHours}時間前";
                            }
                            else if (timeDifference.TotalMinutes >= 1)
                            {
                                timeDifferenceString = $"{(int)timeDifference.TotalMinutes}分前";
                            }
                            else
                            {
                                timeDifferenceString = "たった今";
                            }
                        }
                        <h5 class="card-title"><a asp-action="Details" asp-route-id="@a.PostId">@((a.Title.Length > 17) ? a.Title.Substring(0, 17) + "..." : a.Title)</a></h5>
                        <p class="card-text"><a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName">@(a.UserAccount.NickName ?? a.UserAccount.UserName)</a>・@timeDifferenceString</p>
                        <p class="card-text">@Html.DisplayFor(modelItem => a.Prefecture)</p>
                        <p class="card-text">@a.Place</p>
                        <p class="card-text">@TimeZoneInfo.ConvertTimeFromUtc(a.Time.UtcDateTime, TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time")).ToString("yyyy/MM/dd HH:mm")</p>
                        <p class="card-text">@a.Reward　円</p>
                        <pre style="white-space: pre-wrap;" class="card-text">@((a.Message.Length > 100) ? a.Message.Substring(0, 100) + "..." : a.Message)</pre> 
                        <p class="card-text">@Html.DisplayFor(modelItem => a.Genre)</p>

                        @if (isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id))
                        {
                            <div><strong>認証コード：<span style="color:red;">@a.Certification</span></strong></div>
                        }
                        
                        @{
                            var userAdoptionPosts = ViewData["UserAdoptionPosts"] as Dictionary<int, bool>;
                        }
                        
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <button class="subscription-button" data-post-id="@a.PostId">応募</button>
                                <span class="subscription-count">@(((Dictionary<int, int>)ViewData["SubscriptionCounts"])[a.PostId])</span>
                            </div>
                            @if (userAdoptionPosts != null && userAdoptionPosts.ContainsKey(a.PostId))
                            {
                                <div style="margin-left: auto;">
                                    <a asp-action="VerifyAttendance" asp-controller="RollCalls" asp-route-id="@a.PostId" class="btn btn-success">出席確認</a>
                                </div>
                            }
                        </div>

                        @if (isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id))
                        {
                            var adoptions = ((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]);
                            var adoptionExists = adoptions.ContainsKey(a.PostId) && adoptions[a.PostId];

                            <p>
                                <a asp-action="Subscriber" asp-route-id="@a.PostId">応募者一覧</a>
                                @if (a.State == State.Recruiting)
                                {
                                    <span> | </span>
                                    <a asp-action="Edit" asp-route-id="@a.PostId">Edit</a>
                                }
                                @if (!adoptionExists && a.State == State.Recruiting)
                                {
                                    <span> | </span>
                                    <a asp-action="Delete" asp-route-id="@a.PostId">削除</a>
                                }
                            </p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@{
    var errorMessage = ViewData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}


@section Scripts {
    <script>
        $(function () {
            // Check localStorage for the showAdopted state
            var showAdopted = localStorage.getItem('showAdopted') === 'true';
            
            // Set the initial state of the checkbox
            $('#showAdoptedToggle').prop('checked', showAdopted);

            
            $('#showAdoptedToggle').change(function () {
                showAdopted = $(this).is(':checked');

                // Store the new state in localStorage
                localStorage.setItem('showAdopted', showAdopted);

                window.location.href = '/Posts/MySubscribedPosts?showAdopted=' + showAdopted;
            });
            

            // Initialize button colors based on whether the user has liked each post
            $('.subscription-button').each(function () {
                var button = $(this);
                var postId = button.data('post-id');
                var isLikedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserSubscriptionPosts"]));
                var isAdoptedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]));

                // Check if the user has liked the post
                if (isLikedByUser[postId]) {
                    // Check if the user is the adopted user for this post
                    if (isAdoptedByUser[postId]) {
                        button.addClass('liked-adopted');
                        button.prop('disabled', true);
                    } else {
                        button.addClass('liked');
                    }
                }
            });

            // Handle button clicks
            $('.subscription-button').click(function () {
                var button = $(this);
                var countSpan = button.next('.subscription-count');
                var postId = button.data('post-id');

                // Get the current like count
                var count = parseInt(countSpan.text());

                $.ajax({
                    url: '/Posts/ToggleSubscription',
                    method: 'POST',
                    data: { id: postId },
                    success: function (data) {
                        // Check if the button has the 'liked' class
                        if (button.hasClass('liked')) {
                            // If the button has the 'liked' class, decrement the count and remove the class
                            if (count > 0) {
                                countSpan.text(count - 1);
                            }
                            button.removeClass('liked');
                        } else {
                            // If the button does not have the 'liked' class, increment the count and add the class
                            countSpan.text(count + 1);
                            button.addClass('liked');
                        }
                    }
                });
            });
        });
    </script>
}
