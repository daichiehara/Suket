@using Microsoft.AspNetCore.Identity;
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Bootstrap4.Core;
@model IPagedList<Suket.Models.Post>
@inject UserManager<UserAccount> userManager;
@inject SignInManager<UserAccount> signInManager;

@{
    ViewData["Title"] = "My Posts";
    var currentUser = await userManager.GetUserAsync(User);
    bool isLoggedIn = signInManager.IsSignedIn(User) && currentUser != null;
}
<head>
    <link rel="stylesheet" href="/css/PostIndex.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>

<h1 class="text-primary">My Post</h1>

<div class="fixed-button-container d-md-none">
    <a asp-action="Create" class="fixed-button btn btn-primary">
        <i class="fas fa-plus"></i>
    </a>
</div>


<div class="post-container">
    @foreach (var a in Model)
    {
        <section class="post card-body">
            @if (a.State == State.End)
            {
                <div class="end-banner">募集終了</div>
            }
            else if (a.State == State.Cancel)
            {
                <div class="cancel-banner">中止</div>
            }

            @{
                var timeDifference = DateTimeOffset.UtcNow - a.Created;
                string timeDifferenceString;
                if (timeDifference.TotalDays >= 1)
                {
                    timeDifferenceString = $"{(int)timeDifference.TotalDays}日前";
                }
                else if (timeDifference.TotalHours >= 1)
                {
                    timeDifferenceString = $"{(int)timeDifference.TotalHours}時間前";
                }
                else if (timeDifference.TotalMinutes >= 1)
                {
                    timeDifferenceString = $"{(int)timeDifference.TotalMinutes}分前";
                }
                else
                {
                    timeDifferenceString = "たった今";
                }
            }
            <h5 class="card-title"><a asp-action="Details" asp-route-id="@a.PostId">@((a.Title.Length > 30) ? a.Title.Substring(0, 30) + "..." : a.Title)</a><span style="font-size:16px; color:#6c757d">・@timeDifferenceString</span></h5>
            <div style="display: flex; align-items: center; margin-bottom:10px;">
                <a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName">
                @if (!string.IsNullOrWhiteSpace(a.UserAccount.ProfilePictureUrl))
                {
                        <img src="@a.UserAccount.ProfilePictureUrl" alt="Profile Picture" class="profile-icon" />
                }
                else
                {
                        <img src="https://mintsports-profile-img.s3.ap-northeast-1.amazonaws.com/Spork_Logo.jpg" alt="Profile Picture" class="profile-icon" />
                }
                </a>
                    <p class="card-text"><a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName" style="color: inherit; text-decoration: none;">@(a.UserAccount.NickName ?? a.UserAccount.UserName)</a></p>
            </div>
            <a asp-action="Details" asp-route-id="@a.PostId" style="color: inherit; text-decoration: none;">
                <p class="post-icon">
                    <span class="material-symbols-outlined text-secondary me-2">
                        location_on
                    </span>@Html.DisplayFor(modelItem => a.Prefecture)
                </p>
                <p class="post-icon">
                    <span class="material-symbols-outlined text-secondary me-2">
                        location_on
                    </span>@a.Place
                </p>
                <p class="post-icon">
                    <span class="material-symbols-outlined text-secondary me-2">
                        calendar_month
                    </span>@TimeZoneInfo.ConvertTimeFromUtc(a.Time.UtcDateTime, TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time")).ToString("yyyy/MM/dd HH:mm")
                </p>
                <p>報酬：@a.Reward　円</p>
                <pre style="white-space: pre-wrap;">@((a.Message.Length > 100) ? a.Message.Substring(0, 100) + "..." : a.Message)</pre>
                <p class="post-icon">
                    <span class="material-symbols-outlined text-secondary me-2">
                        sell
                    </span>@Html.DisplayFor(modelItem => a.Genre)
                </p>
                <div><strong>認証コード：<span style="color:red;">@a.Certification</span></strong></div>
            </a>
            <div style="display:flex; align-items:center;">
                <p class="mb-0">応募 @(((Dictionary<int, int>)ViewData["SubscriptionCounts"])[a.PostId]) 件</p>
                <span class="material-symbols-outlined pointer ms-auto" div data-bs-toggle="modal" data-bs-target="@($"#modal{a.PostId}")">
                    more_vert
                </span>
            </div>
            <!--<button class="subscription-button" data-post-id="@a.PostId">いいね</button>
            <span class="subscription-count">@(((Dictionary<int, int>)ViewData["SubscriptionCounts"])[a.PostId])</span>
            -->
            <!-- モーダル -->
            <div class="modal fade" id="@($"modal{a.PostId}")" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalLabel">オプション</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (isLoggedIn && ((currentUser != null) && (a.UserAccountId == currentUser.Id)))
                            {
                                var adoptions = ((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]);
                                var adoptionExists = adoptions.ContainsKey(a.PostId) && adoptions[a.PostId];


                                <a asp-action="Subscriber" asp-route-id="@a.PostId">
                                    <div>
                                        <span class="material-symbols-outlined text-secondary">
                                            group
                                        </span>
                                        <p>応募者一覧</p>
                                    </div>
                                </a>
                                <br />
                                @if (a.State == State.Recruiting)
                                {
                                    <a asp-action="Edit" asp-route-id="@a.PostId">
                                        <div>
                                            <span class="material-symbols-outlined text-secondary">
                                                edit
                                            </span>
                                            <p>Edit</p>
                                        </div>
                                    </a>
                                }
                                @if (!adoptionExists && a.State == State.Recruiting)
                                {
                                    <br />
                                    <a asp-action="Delete" asp-route-id="@a.PostId">
                                        <div>
                                            <span class="material-symbols-outlined text-secondary">
                                                delete
                                            </span>
                                            <p>削除</p>
                                        </div>
                                    </a>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!--
            @if (isLoggedIn && ((currentUser != null) && (a.UserAccountId == currentUser.Id)))
            {
                var adoptions = ((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]);
                var adoptionExists = adoptions.ContainsKey(a.PostId) && adoptions[a.PostId];

                    <p>
                        <a asp-action="Subscriber" asp-route-id="@a.PostId">応募者一覧</a>
                    @if (a.State == State.Recruiting)
                    {
                                <span> | </span>
                                <a asp-action="Edit" asp-route-id="@a.PostId">Edit</a>
                    }
                    @if (!adoptionExists && a.State == State.Recruiting)
                    {
                                <span> | </span>
                                <a asp-action="Delete" asp-route-id="@a.PostId">削除</a>
                    }
                    </p>
            }
            -->

        </section>
    }
</div>
@{
    var errorMessage = ViewData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div style="text-align:center; margin-top:20px;">
    @if (ViewData["TotalCount"] != null && ViewData["TotalPages"] != null && ViewData["CurrentPage"] != null)
    {
        if ((int)ViewData["TotalCount"] != 0)
        {
            <text> @ViewData["TotalCount"] 件/@ViewData["TotalPages"] ページ中/@ViewData["CurrentPage"] ページ目</text>
            <div style="display: flex; justify-content: center;">
                <div style="text-align:center;">
                    @Html.PagedListPager(Model, page => Url.Action("MyPosts", new { page }), Bootstrap4PagedListRenderOptions.ClassicPlusFirstAndLast)
                </div>
            </div>
        }
        else
        {
            <text>該当する投稿はありません。</text>
        }
        
    }
</div>


@section Scripts {
    <script>
        $(function () {
            // Initialize button colors based on whether the user has liked each post
            $('.subscription-button').each(function () {
                var button = $(this);
                var postId = button.data('post-id');
                var isLikedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserSubscriptionPosts"]));
                var isAdoptedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]));

                // Check if the user has liked the post
                if (isLikedByUser[postId]) {
                    // Check if the user is the adopted user for this post
                    if (isAdoptedByUser[postId]) {
                        button.addClass('liked-adopted');
                        button.prop('disabled', true);
                    } else {
                        button.addClass('liked');
                    }
                }
            });

            // Handle button clicks
            $('.subscription-button').click(function () {
                var button = $(this);
                var countSpan = button.next('.subscription-count');
                var postId = button.data('post-id');

                // Get the current like count
                var count = parseInt(countSpan.text());

                $.ajax({
                    url: '/Posts/ToggleSubscription',
                    method: 'POST',
                    data: { id: postId },
                    success: function (data) {
                        // Check if the button has the 'liked' class
                        if (button.hasClass('liked')) {
                            // If the button has the 'liked' class, decrement the count and remove the class
                            if (count > 0) {
                                countSpan.text(count - 1);
                            }
                            button.removeClass('liked');
                        } else {
                            // If the button does not have the 'liked' class, increment the count and add the class
                            countSpan.text(count + 1);
                            button.addClass('liked');
                        }
                    }
                });
            });
        });
    </script>
}
