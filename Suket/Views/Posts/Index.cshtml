@using Microsoft.AspNetCore.Identity;
@model PostIndexViewModel
@inject UserManager<UserAccount> userManager;
@inject SignInManager<UserAccount> signInManager;

@{
    ViewData["Title"] = "Post";

    var currentUser = await userManager.GetUserAsync(User);
    bool isLoggedIn = signInManager.IsSignedIn(User) && currentUser != null;
    var isAdmin = false;
    if (isLoggedIn)
    {
        var user = await userManager.GetUserAsync(User);
        isAdmin = await userManager.IsInRoleAsync(user, "Admin");
    }
}

@{
    var selectedGenre = ViewData["SelectedGenre"] as Genre?;
    var selectedPrefecture = ViewData["CurrentPrefecture"] as Prefecture?;
    var currentSearch = ViewData["CurrentSearch"] as string;
    var fromDateTime = ViewData["FromDateTime"] as string;
    var hitCount = Model.Posts.Count(); // 検索結果の件数を取得
}

<head>
    <link rel="stylesheet" href="/css/PostIndex.css" />
    <link rel="stylesheet" href="/css/Pagination.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>

<style>
    select.form-control {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 4px;
        appearance: menulist-button; /* これで少しプルダウンらしさを出すことが可能です */
    }

    #closeButton {
        background-color: transparent;
        border: none;
        font-size: 2rem; /* フォントサイズを大きくする */
        outline: none; /* ボタンクリック時のアウトラインを除去 */
        cursor: pointer;
    }

    #closeButton:hover {
        color: #999; /* ホバー時の色を変更 */
    }


</style>

<body>
<div id="loadingOverlay" class="d-none" style="
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
">
</div>
<div id="loadingSpinner" class="d-none" style="
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 9999;
    text-align: center;
">
    <div class="spinner-border text-primary" role="status"></div>
    <div style="color: blue; font-weight: bold;">Loading...</div>
</div>


<div class="d-flex justify-content-between align-items-center">
    <h3 class="mr-3 text-primary" style="font-weight:bold">Post</h3>
    <button id="filterButton" class="ml-auto d-flex align-items-center">
        <svg style="margin-right:5px;" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="humbleicons hi-adjustments ml-2">
            <path xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v10m0 6v-.5M17.5 4v5m0 11v-5.56M6.5 4v2m0 14v-8.44M6.5 6a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm5.5 8a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm5.5-5a1.5 1.5 0 100 3 1.5 1.5 0 000-3z"/>
        </svg>
        絞り込み
    </button>
</div>


<div id="filterForm" class="d-none position-fixed bg-white rounded shadow-sm p-3" style="top: 0; right: 0; width: 80%; max-width: 600px; z-index: 100;">
    <button id="closeButton" class="close">×</button>
    <form asp-action="Index" method="get">
        <div class="form-group">
            <input type="text" class="form-control" name="searchString" placeholder="キーワードを入力..." value="@ViewData["CurrentSearch"]" />
        </div>
        <div class="form-row">
            <div class="form-group col-sm-6">
                <label for="genre">ジャンル</label>
                <select name="genre" id="genre" class="form-control">
                    <option value="">すべて</option>
                    @if (selectedGenre == Genre.Baseball)
                    {
                        <option value="Baseball" selected>野球</option>
                    }
                    else
                    {
                        <option value="Baseball">野球</option>
                    }
                    @if (selectedGenre == Genre.Soccer)
                    {
                        <option value="Soccer" selected>サッカー</option>
                    }
                    else
                    {
                        <option value="Soccer">サッカー</option>
                    }
                    @if (selectedGenre == Genre.Q)
                    {
                        <option value="Q" selected>その他</option>
                    }
                    else
                    {
                        <option value="Q">その他</option>
                    }
                </select>
            </div>
            <div class="form-group col-sm-6">
                <label for="prefecture">都道府県</label>
                <select name="prefecture" id="prefecture" class="form-control">
                    <option value="">すべて</option>
                    @foreach (Prefecture prefecture in Enum.GetValues(typeof(Prefecture)))
                    {
                        if ((Prefecture?)ViewData["CurrentPrefecture"] == prefecture)
                        {
                            <option value="@prefecture" selected>@Html.DisplayFor(_ => prefecture)</option>
                        }
                        else
                        {
                            <option value="@prefecture">@Html.DisplayFor(_ => prefecture)</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group col-sm-6">
                <label for="fromDateTime" class="control-label">開催日時(指定日時以降のものを表示)</label>
                <input name="fromDateTime" class="form-control" id="fromDateTime" type="datetime-local" value="@ViewData["FromDateTime"]" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
            </div>
            <div>
                <label>
                    <input type="checkbox" name="sortByDateTime" value="true" @((bool)ViewData["SortByDateTime"] ? "checked" : "") /> 開催日時が近い順に表示
                </label>
            </div>

        </div>
        <button type="submit" class="btn btn-primary">検索</button>
    </form>
</div>


<div class="fixed-button-container">
    <a asp-action="Create" class="fixed-button btn btn-primary">
        <i class="fas fa-plus"></i>
    </a>
</div>

<!--
<button id="sendGreetingButton" class="btn btn-primary">挨拶を送る</button>
<button id="delete-stripe-account">Delete Stripe Account</button>
-->


@if (!string.IsNullOrWhiteSpace(currentSearch) || selectedGenre.HasValue || selectedPrefecture.HasValue || fromDateTime != null)
{
    <div>
        <h4>
            @if (selectedGenre.HasValue)
            {
                <text>ジャンル「@Html.DisplayFor(_ => selectedGenre)」、</text>
            }
            @if (selectedPrefecture.HasValue)
            {
                <text>都道府県「@Html.DisplayFor(_ => selectedPrefecture)」、</text>
            }
            @if (fromDateTime != null)
            {
                <text>開催日時 「@Html.DisplayFor(_ => fromDateTime)」、</text>
            }
            @if (!string.IsNullOrWhiteSpace(currentSearch))
            {
                <text>「@currentSearch」</text>
            }
            の検索結果（@ViewData["TotalPosts"] 件）
        </h4>
    </div>
}

<div class="row row-cols-1 row-cols-md-3 g-4">
    @foreach (var a in Model.Posts)
    {
        <div class="col">
            <div class="card h-100">
                <div class="card-body" style="margin-bottom:10px;">
                    @{
                        var timeDifference = DateTimeOffset.UtcNow - a.Created;
                        string timeDifferenceString;
                        if (timeDifference.TotalDays >= 1)
                        {
                            timeDifferenceString = $"{(int)timeDifference.TotalDays}日前";
                        }
                        else if (timeDifference.TotalHours >= 1)
                        {
                            timeDifferenceString = $"{(int)timeDifference.TotalHours}時間前";
                        }
                        else if (timeDifference.TotalMinutes >= 1)
                        {
                            timeDifferenceString = $"{(int)timeDifference.TotalMinutes}分前";
                        }
                        else
                        {
                            timeDifferenceString = "たった今";
                        }
                    }
                    <h5 class="card-title"><a asp-action="Details" asp-route-id="@a.PostId">@((a.Title.Length > 17) ? a.Title.Substring(0, 17) + "..." : a.Title)</a></h5>
                    <p class="card-text"><a asp-controller="Users" asp-action="Profile" asp-route-UserName="@a.UserAccount.UserName">@(a.UserAccount.NickName ?? a.UserAccount.UserName)</a>・@timeDifferenceString</p>
                    <p class="card-text">@Html.DisplayFor(modelItem => a.Prefecture)</p>
                    <p class="card-text">@a.Place</p>
                    <p class="card-text">@TimeZoneInfo.ConvertTimeFromUtc(a.Time.UtcDateTime, TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time")).ToString("yyyy/MM/dd HH:mm")</p>
                    <p class="card-text">報酬：@a.Reward　円</p>
                    <pre class="card-text">@((a.Message.Length > 100) ? a.Message.Substring(0, 100) + "..." : a.Message)</pre>
                    <p class="card-text">@Html.DisplayFor(modelItem => a.Genre)</p>
                    @{
                        var userAdoptionPosts = ViewData["UserAdoptionPosts"] as Dictionary<int, bool>;
                        //var isAdopted = userAdoptionPosts?[a.PostId] ?? false;
                        var isAdopted = userAdoptionPosts?.ContainsKey(a.PostId) == true ? userAdoptionPosts[a.PostId] : false;
                    }

                    @if ((isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id)) || isAdmin)
                    {
                        <div><strong>認証コード：<span style="color:red;">@a.Certification</span></strong></div>
                    }

                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <button class="subscription-button" data-post-id="@a.PostId" data-reward="@a.Reward">応募</button>
                            <span class="subscription-count">@(((Dictionary<int, int>)ViewData["SubscriptionCounts"])[a.PostId])</span>
                        </div>
                        @if (isAdopted)
                        {
                            <div style="margin-left: auto;">
                                <a asp-action="VerifyAttendance" asp-controller="RollCalls" asp-route-id="@a.PostId" class="btn btn-success">出席確認</a>
                            </div>
                        }
                    </div>



                    @if ((isLoggedIn && (currentUser != null && a.UserAccountId == currentUser.Id)) || isAdmin)
                    {
                        var adoptions = ((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]);
                        var adoptionExists = adoptions.ContainsKey(a.PostId) && adoptions[a.PostId];

                        <p>
                            <a asp-action="Subscriber" asp-route-id="@a.PostId">応募者一覧</a>
                            <a asp-action="Edit" asp-route-id="@a.PostId">Edit</a>
                            @if (!adoptionExists && isAdmin)
                            {
                                <span> | </span>
                                <a asp-action="Delete" asp-route-id="@a.PostId">削除</a>
                            }
                        </p>
                    }
                </div>
            </div>
        </div>
    }
</div>
@{
    var errorMessage = ViewData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}



<!-- Replace the previous pagination section with this Bootstrap-enhanced pagination -->
@{
    // Extract the current query parameters from the Request URL
    var queryString = ViewContext.HttpContext.Request.QueryString.Value;
    if (!string.IsNullOrEmpty(queryString))
    {
        queryString = queryString.Substring(1); // Remove the leading '?'
    }
}
<div style="text-align:center; margin-top:20px;">
    @if (Model.Posts.Any())
    {
        <text>@ViewData["TotalPosts"]件/@Model.TotalPages ページ中/@Model.CurrentPage ページ目</text>
    }
    else
    {
        <text>該当する投稿はありません。</text>
    }
</div>
<div class="pagination">
    <!-- Previous page link -->
    @if (Model.CurrentPage > 1)
    {
        <a class="pagination-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-searchString="@ViewData["CurrentSearch"]"
       asp-route-genre="@((Genre?)ViewData["SelectedGenre"])" asp-route-prefecture="@((Prefecture?)ViewData["CurrentPrefecture"])"
       asp-route-fromDateTime="@((string)ViewData["FromDateTime"])" asp-route-sortByDateTime="@((bool)ViewData["SortByDateTime"])">Previous</a>
    }
    else
    {
        <span class="disabled">Previous</span>
    }

    <!-- Page links -->
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        if (Model.CurrentPage == i)
        {
            <span class="current-page">@i</span>
        }
        else
        {
            <a class="pagination-link" asp-action="Index" asp-route-page="@i" asp-route-searchString="@ViewData["CurrentSearch"]"
       asp-route-genre="@((Genre?)ViewData["SelectedGenre"])" asp-route-prefecture="@((Prefecture?)ViewData["CurrentPrefecture"])"
       asp-route-fromDateTime="@((string)ViewData["FromDateTime"])" asp-route-sortByDateTime="@((bool)ViewData["SortByDateTime"])">@i</a>
        }
    }

    <!-- Next page link -->
    @if (Model.CurrentPage < Model.TotalPages)
    {
        <a class="pagination-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-searchString="@ViewData["CurrentSearch"]"
       asp-route-genre="@((Genre?)ViewData["SelectedGenre"])" asp-route-prefecture="@((Prefecture?)ViewData["CurrentPrefecture"])"
       asp-route-fromDateTime="@((string)ViewData["FromDateTime"])" asp-route-sortByDateTime="@((bool)ViewData["SortByDateTime"])">Next</a>
    }
    else
    {
        <span class="disabled">Next</span>
    }
</div>
</body>





@section Scripts {
    <script>
        $(document).ready(function () {
            $("#viewTransactionHistory").click(function () {
                $(this).hide();
                $("#loadingSpinner, #loadingOverlay").removeClass("d-none");
            });

            $("button[onclick^='location.href']").click(function () {
                $(this).hide();
                $("#loadingSpinner, #loadingOverlay").removeClass("d-none");
            });
        });
        
        async function checkUserHasStripeAccount() {
            var result = false;
            // Make Ajax request to your server-side endpoint to check if the user has a Stripe account
            await $.ajax({
                url: '/Stripe/HasStripeAccount', // replace this with your server-side endpoint
                type: 'GET',
                success: function (data) {
                    result = data.hasStripeAccount;
                },
                error: function (error) {
                    console.error('Error while checking if user has Stripe account', error);
                }
            });

            return result;
        }

        $(function () {
            // Initialize button colors based on whether the user has liked each post
            $('.subscription-button').each(function () {
                var button = $(this);
                var postId = button.data('post-id');
                var isLikedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserSubscriptionPosts"]));
                var isAdoptedByUser = @Html.Raw(Json.Serialize((Dictionary<int, bool>)ViewData["UserAdoptionPosts"]));

                // Check if the user has liked the post
                if (isLikedByUser[postId]) {
                    // Check if the user is the adopted user for this post
                    if (isAdoptedByUser[postId]) {
                        button.addClass('liked-adopted');
                        button.prop('disabled', true);
                    } else {
                        button.addClass('liked');
                    }
                }
            });

            // Handle button clicks
            $('.subscription-button').click(async function () {
                var button = $(this);
                var countSpan = button.next('.subscription-count');
                var postId = button.data('post-id');
                var postReward = parseFloat(button.data('reward')); // Get the reward from the button's data attribute

                if (postReward !== 0){

                    const hasStripeAccount = await checkUserHasStripeAccount();

                    if (!hasStripeAccount) {
                        // If the user does not have a Stripe account, request to create one
                        var confirmResult = confirm("報酬を受け取るには銀行口座の登録が必要です。作成しますか？（口座を登録しないと応募はできません。）");
                        if (confirmResult) {
                            $('#loadingSpinner, #loadingOverlay').removeClass('d-none'); // ローディングスピナーとオーバーレイを表示
                            setTimeout(() => {
                                window.location.href = '/Stripe/CreateAccount';
                            }, 500); // 500ミリ秒のディレイを追加
                        }
                        return;
                    }
                }
                // Get the current like count
                var count = parseInt(countSpan.text());

                $.ajax({
                    url: '/Posts/ToggleSubscription',
                    method: 'POST',
                    data: { id: postId },
                    success: function (data) {
                        // Check if the button has the 'liked' class
                        if (button.hasClass('liked')) {
                            // If the button has the 'liked' class, decrement the count and remove the class
                            if (count > 0) {
                                countSpan.text(count - 1);
                            }
                            button.removeClass('liked');
                        } else {
                            // If the button does not have the 'liked' class, increment the count and add the class
                            countSpan.text(count + 1);
                            button.addClass('liked');
                        }
                    }
                });
            });

        });

        $(window).on('load', function() {
            $('#loader').hide();
        });

        document.getElementById('filterButton').addEventListener('click', function() {
        const filterForm = document.getElementById('filterForm');
        filterForm.classList.toggle('d-none');
        });
        document.getElementById('closeButton').addEventListener('click', function() {
            document.getElementById('filterForm').classList.add('d-none');
        });

        document.getElementById('sendGreetingButton').addEventListener('click', function () {
            $.ajax({
                url: '/Posts/SendGreeting',
                method: 'POST',
                success: function (data) {
                    alert('挨拶メールを送信しました！');
                }
            });
        });

        $(document).ready(function () {
            $('#delete-stripe-account').click(function () {
                $.ajax({
                    url: '/Stripe/DeleteStripeAccount',
                    type: 'POST',
                    success: function () {
                        alert('Stripe account successfully deleted');
                    },
                    error: function (error) {
                        console.error('Error while deleting Stripe account', error);
                    }
                });
            });
        });

        
        
    </script>
        
}