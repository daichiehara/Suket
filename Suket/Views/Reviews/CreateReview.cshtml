@using Microsoft.AspNetCore.Identity;
@inject UserManager<UserAccount> userManager;
@model Suket.Models.Review

@{
    ViewData["Title"] = "Create Review";
    var currentUser = await userManager.GetUserAsync(User);
}

<h2>レビューする</h2>

<p>評価対象者：@ViewData["ReviewedUserName"]</p>

<form asp-action="CreateReview">
    <input type="hidden" asp-for="PostId" value="@ViewData["PostId"]" />
    <input type="hidden" asp-for="ReviewedId" value="@ViewData["UserId"]" />
    <input type="hidden" asp-for="ReviewerId" value="@currentUser.Id" />

    <div class="form-group">
        <label asp-for="MannerLevel" class="control-label">マナーレベル</label>
        <select asp-for="MannerLevel" class="form-control">
            <option value="">Select...</option>
            @for (int i = 1; i <= 5; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <span asp-validation-for="MannerLevel" class="text-danger"></span>
    </div>

    @if (ViewData["IsReviewByAuthor"] != null && !(bool)ViewData["IsReviewByAuthor"])
{
    <div class="form-group">
        <label asp-for="SkillLevel" class="control-label">スキルレベル</label>
        <select asp-for="SkillLevel" class="form-control">
            <option value="">Select...</option>
            @for (int i = 1; i <= 5; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <span asp-validation-for="SkillLevel" class="text-danger"></span>
    </div>
}



    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>
@if (ViewData["Errors"] != null)
{
        <div class="alert alert-danger">
        @foreach (var error in ViewData["Errors"] as List<string>)
        {
                    <p>@error</p>
        }
        </div>
}

<div>
    <a asp-action="ReviewablePosts">レビューリスト</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
