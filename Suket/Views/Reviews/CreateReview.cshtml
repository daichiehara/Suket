@using Microsoft.AspNetCore.Identity;
@inject UserManager<UserAccount> userManager;
@model Suket.Models.Review

@{
    ViewData["Title"] = "Create Review";
    var currentUser = await userManager.GetUserAsync(User);
}

<style>
    .rate-form {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
    }

        .rate-form input[type=radio] {
            display: none;
        }

        .rate-form label {
            position: relative;
            padding: 0 5px;
            color: #ccc;
            cursor: pointer;
            font-size: 35px;
        }

            .rate-form label:hover {
                color: #ffcc00;
            }

                .rate-form label:hover ~ label {
                    color: #ffcc00;
                }

        .rate-form input[type=radio]:checked ~ label {
            color: #ffcc00;
        }
</style>


<h2>レビューする</h2>

<p>評価対象者：@ViewData["ReviewedUserName"]</p>

<form asp-action="CreateReview">
    <input type="hidden" asp-for="PostId" value="@ViewData["PostId"]" />
    <input type="hidden" asp-for="ReviewedId" value="@ViewData["UserId"]" />
    <input type="hidden" asp-for="ReviewerId" value="@currentUser.Id" />

    <div class="form-group">
        <label asp-for="MannerLevel" class="control-label">マナーレベル <span class="text-danger">必須</span></label>

        <!-- Star rating system -->
        <div class="rate-form">
            <input id="star5" type="radio" name="MannerLevel" value="5">
            <label for="star5">★</label>
            <input id="star4" type="radio" name="MannerLevel" value="4">
            <label for="star4">★</label>
            <input id="star3" type="radio" name="MannerLevel" value="3">
            <label for="star3">★</label>
            <input id="star2" type="radio" name="MannerLevel" value="2">
            <label for="star2">★</label>
            <input id="star1" type="radio" name="MannerLevel" value="1">
            <label for="star1">★</label>
        </div>

        <span asp-validation-for="MannerLevel" class="text-danger"></span>
    </div>
    <br />

    @if (ViewData["IsReviewByAuthor"] != null && !(bool)ViewData["IsReviewByAuthor"])
    {
        <div class="form-group">
            <label asp-for="SkillLevel" class="control-label">スキルレベル</label>

            <!-- Star rating system for SkillLevel -->
            <div class="rate-form">
                <input id="skillStar5" type="radio" name="SkillLevel" value="5">
                <label for="skillStar5">★</label>
                <input id="skillStar4" type="radio" name="SkillLevel" value="4">
                <label for="skillStar4">★</label>
                <input id="skillStar3" type="radio" name="SkillLevel" value="3">
                <label for="skillStar3">★</label>
                <input id="skillStar2" type="radio" name="SkillLevel" value="2">
                <label for="skillStar2">★</label>
                <input id="skillStar1" type="radio" name="SkillLevel" value="1">
                <label for="skillStar1">★</label>
            </div>

            <span asp-validation-for="SkillLevel" class="text-danger"></span>
        </div>

    }



    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>
@if (ViewData["Errors"] != null)
{
        <div class="alert alert-danger">
        @foreach (var error in ViewData["Errors"] as List<string>)
        {
                    <p>@error</p>
        }
        </div>
}

<div>
    <a asp-action="ReviewablePosts">レビューリスト</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
